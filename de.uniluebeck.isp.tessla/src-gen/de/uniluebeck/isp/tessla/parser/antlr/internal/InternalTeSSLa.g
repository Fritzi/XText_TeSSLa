/*
 * generated by Xtext 2.12.0
 */
grammar InternalTeSSLa;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package de.uniluebeck.isp.tessla.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.uniluebeck.isp.tessla.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.uniluebeck.isp.tessla.services.TeSSLaGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private TeSSLaGrammarAccess grammarAccess;

    public InternalTeSSLaParser(TokenStream input, TeSSLaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TeSSLaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getSpecStatementParserRuleCall_0());
			}
			lv_spec_0_0=rulestatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"spec",
					lv_spec_0_0,
					"de.uniluebeck.isp.tessla.TeSSLa.statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_rulestatement=rulestatement
	{ $current=$iv_rulestatement.current; }
	EOF;

// Rule statement
rulestatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_0());
		}
		this_definition_0=ruledefinition
		{
			$current = $this_definition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getOutParserRuleCall_1());
		}
		this_out_1=ruleout
		{
			$current = $this_out_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getInParserRuleCall_2());
		}
		this_in_2=rulein
		{
			$current = $this_in_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		this_SL_COMMENT_3=RULE_SL_COMMENT
		{
			newLeafNode(this_SL_COMMENT_3, grammarAccess.getStatementAccess().getSL_COMMENTTerminalRuleCall_3());
		}
	)
;

// Entry rule entryRuledefinition
entryRuledefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruledefinition=ruledefinition
	{ $current=$iv_ruledefinition.current; }
	EOF;

// Rule definition
ruledefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='def'
			{
				newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getDefKeyword_0_0());
			}
			    |
			otherlv_1='define'
			{
				newLeafNode(otherlv_1, grammarAccess.getDefinitionAccess().getDefineKeyword_0_1());
			}
		)
		(
			(
				lv_def_2_0=RULE_ID
				{
					newLeafNode(lv_def_2_0, grammarAccess.getDefinitionAccess().getDefIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"def",
						lv_def_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getParamListParamListParserRuleCall_2_0());
				}
				lv_paramList_3_0=ruleparamList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"paramList",
						lv_paramList_3_0,
						"de.uniluebeck.isp.tessla.TeSSLa.paramList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_4=':'
			{
				newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getColonKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getTypeTypeParserRuleCall_3_1_0());
					}
					lv_type_5_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"type",
							lv_type_5_0,
							"de.uniluebeck.isp.tessla.TeSSLa.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6=':='
		{
			newLeafNode(otherlv_6, grammarAccess.getDefinitionAccess().getColonEqualsSignKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_5_0_0());
					}
					lv_expression_7_0=ruleexpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_7_0,
							"de.uniluebeck.isp.tessla.TeSSLa.expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_8='{'
				{
					newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getLeftCurlyBracketKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDefinitionAccess().getStatementsStatementParserRuleCall_5_1_1_0());
						}
						lv_statements_9_0=rulestatement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefinitionRule());
							}
							add(
								$current,
								"statements",
								lv_statements_9_0,
								"de.uniluebeck.isp.tessla.TeSSLa.statement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				(
					(
						{
							newCompositeNode(grammarAccess.getDefinitionAccess().getExpressionExpressionParserRuleCall_5_1_2_0());
						}
						lv_expression_10_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefinitionRule());
							}
							set(
								$current,
								"expression",
								lv_expression_10_0,
								"de.uniluebeck.isp.tessla.TeSSLa.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_11='}'
				{
					newLeafNode(otherlv_11, grammarAccess.getDefinitionAccess().getRightCurlyBracketKeyword_5_1_3());
				}
			)
		)
	)
;

// Entry rule entryRuleparamList
entryRuleparamList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamListRule()); }
	iv_ruleparamList=ruleparamList
	{ $current=$iv_ruleparamList.current; }
	EOF;

// Rule paramList
ruleparamList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getParamListAccess().getParamListAction_0_0(),
						$current);
				}
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getParamListAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					lv_params_2_0=RULE_ID
					{
						newLeafNode(lv_params_2_0, grammarAccess.getParamListAccess().getParamsIDTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParamListRule());
						}
						addWithLastConsumed(
							$current,
							"params",
							lv_params_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_3=':'
				{
					newLeafNode(otherlv_3, grammarAccess.getParamListAccess().getColonKeyword_0_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParamListAccess().getTypesTypeParserRuleCall_0_3_1_0());
						}
						lv_types_4_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParamListRule());
							}
							add(
								$current,
								"types",
								lv_types_4_0,
								"de.uniluebeck.isp.tessla.TeSSLa.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getParamListAccess().getCommaKeyword_0_4_0());
				}
				(
					(
						lv_params_6_0=RULE_ID
						{
							newLeafNode(lv_params_6_0, grammarAccess.getParamListAccess().getParamsIDTerminalRuleCall_0_4_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getParamListRule());
							}
							addWithLastConsumed(
								$current,
								"params",
								lv_params_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
				(
					otherlv_7=':'
					{
						newLeafNode(otherlv_7, grammarAccess.getParamListAccess().getColonKeyword_0_4_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getParamListAccess().getTypesTypeParserRuleCall_0_4_2_1_0());
							}
							lv_types_8_0=ruletype
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getParamListRule());
								}
								add(
									$current,
									"types",
									lv_types_8_0,
									"de.uniluebeck.isp.tessla.TeSSLa.type");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)*
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getParamListAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getParamListAccess().getParamListAction_1_0(),
						$current);
				}
			)
			otherlv_11='('
			{
				newLeafNode(otherlv_11, grammarAccess.getParamListAccess().getLeftParenthesisKeyword_1_1());
			}
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getParamListAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleout
entryRuleout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutRule()); }
	iv_ruleout=ruleout
	{ $current=$iv_ruleout.current; }
	EOF;

// Rule out
ruleout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='out'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutAccess().getOutKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleexpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"de.uniluebeck.isp.tessla.TeSSLa.expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='as'
			{
				newLeafNode(otherlv_2, grammarAccess.getOutAccess().getAsKeyword_2_0());
			}
			(
				(
					lv_name_3_0=RULE_ID
					{
						newLeafNode(lv_name_3_0, grammarAccess.getOutAccess().getNameIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_3_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRulein
entryRulein returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInRule()); }
	iv_rulein=rulein
	{ $current=$iv_rulein.current; }
	EOF;

// Rule in
rulein returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='in'
		{
			newLeafNode(otherlv_0, grammarAccess.getInAccess().getInKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getInAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInAccess().getTypeTypeParserRuleCall_3_0());
				}
				lv_type_3_0=ruletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"de.uniluebeck.isp.tessla.TeSSLa.type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleexpression
entryRuleexpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleexpression=ruleexpression
	{ $current=$iv_ruleexpression.current; }
	EOF;

// Rule expression
ruleexpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='if'
				{
					newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getIfKeyword_0_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getInfixExpInfixParserRuleCall_0_0_1_0());
						}
						lv_infix_1_0=ruleexpInfix
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							add(
								$current,
								"infix",
								lv_infix_1_0,
								"de.uniluebeck.isp.tessla.TeSSLa.expInfix");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2='then'
				{
					newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getThenKeyword_0_0_2());
				}
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getInfixExpInfixParserRuleCall_0_1_0());
					}
					lv_infix_3_0=ruleexpInfix
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						add(
							$current,
							"infix",
							lv_infix_3_0,
							"de.uniluebeck.isp.tessla.TeSSLa.expInfix");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4='else'
				{
					newLeafNode(otherlv_4, grammarAccess.getExpressionAccess().getElseKeyword_0_2_0());
				}
				(
					otherlv_5='if'
					{
						newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getIfKeyword_0_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getExpressionAccess().getInfixExpInfixParserRuleCall_0_2_1_1_0());
							}
							lv_infix_6_0=ruleexpInfix
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpressionRule());
								}
								add(
									$current,
									"infix",
									lv_infix_6_0,
									"de.uniluebeck.isp.tessla.TeSSLa.expInfix");
								afterParserOrEnumRuleCall();
							}
						)
					)
					otherlv_7='then'
					{
						newLeafNode(otherlv_7, grammarAccess.getExpressionAccess().getThenKeyword_0_2_1_2());
					}
				)*
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getInfixExpInfixParserRuleCall_0_2_2_0());
						}
						lv_infix_8_0=ruleexpInfix
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							add(
								$current,
								"infix",
								lv_infix_8_0,
								"de.uniluebeck.isp.tessla.TeSSLa.expInfix");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_9=':'
				{
					newLeafNode(otherlv_9, grammarAccess.getExpressionAccess().getColonKeyword_0_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpressionAccess().getTypeTypeParserRuleCall_0_3_1_0());
						}
						lv_type_10_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpressionRule());
							}
							set(
								$current,
								"type",
								lv_type_10_0,
								"de.uniluebeck.isp.tessla.TeSSLa.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			this_ID_11=RULE_ID
			{
				newLeafNode(this_ID_11, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1_0());
			}
			otherlv_12='='
			{
				newLeafNode(otherlv_12, grammarAccess.getExpressionAccess().getEqualsSignKeyword_1_1());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_1_2());
			}
			this_expression_13=ruleexpression
			{
				$current = $this_expression_13.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleexpInfix
entryRuleexpInfix returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpInfixRule()); }
	iv_ruleexpInfix=ruleexpInfix
	{ $current=$iv_ruleexpInfix.current; }
	EOF;

// Rule expInfix
ruleexpInfix returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpInfixAccess().getUnaryExpUnaryParserRuleCall_0_0());
				}
				lv_unary_0_0=ruleexpUnary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpInfixRule());
					}
					add(
						$current,
						"unary",
						lv_unary_0_0,
						"de.uniluebeck.isp.tessla.TeSSLa.expUnary");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpInfixAccess().getOperatorInfixOperatorParserRuleCall_1_0_0());
					}
					lv_operator_1_0=ruleinfixOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpInfixRule());
						}
						add(
							$current,
							"operator",
							lv_operator_1_0,
							"de.uniluebeck.isp.tessla.TeSSLa.infixOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpInfixAccess().getUnaryExpUnaryParserRuleCall_1_1_0());
					}
					lv_unary_2_0=ruleexpUnary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpInfixRule());
						}
						add(
							$current,
							"unary",
							lv_unary_2_0,
							"de.uniluebeck.isp.tessla.TeSSLa.expUnary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getExpInfixAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpInfixAccess().getTypeTypeParserRuleCall_2_1_0());
					}
					lv_type_4_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpInfixRule());
						}
						set(
							$current,
							"type",
							lv_type_4_0,
							"de.uniluebeck.isp.tessla.TeSSLa.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleexpUnary
entryRuleexpUnary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpUnaryRule()); }
	iv_ruleexpUnary=ruleexpUnary
	{ $current=$iv_ruleexpUnary.current; }
	EOF;

// Rule expUnary
ruleexpUnary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpUnaryAccess().getOperatorUnaryOperatorParserRuleCall_0_0());
				}
				lv_operator_0_0=ruleunaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpUnaryRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"de.uniluebeck.isp.tessla.TeSSLa.unaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExpUnaryAccess().getValueExpFuncParserRuleCall_1_0());
				}
				lv_value_1_0=ruleexpFunc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpUnaryRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"de.uniluebeck.isp.tessla.TeSSLa.expFunc");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpUnaryAccess().getColonKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpUnaryAccess().getTypeTypeParserRuleCall_2_1_0());
					}
					lv_type_3_0=ruletype
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpUnaryRule());
						}
						set(
							$current,
							"type",
							lv_type_3_0,
							"de.uniluebeck.isp.tessla.TeSSLa.type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleexpFunc
entryRuleexpFunc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpFuncRule()); }
	iv_ruleexpFunc=ruleexpFunc
	{ $current=$iv_ruleexpFunc.current; }
	EOF;

// Rule expFunc
ruleexpFunc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getExpFuncAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExpFuncRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getExpFuncAccess().getLeftParenthesisKeyword_0_1());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getExpFuncAccess().getParamsExpressionParserRuleCall_0_2_0_0());
						}
						lv_params_2_0=ruleexpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpFuncRule());
							}
							add(
								$current,
								"params",
								lv_params_2_0,
								"de.uniluebeck.isp.tessla.TeSSLa.expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getExpFuncAccess().getCommaKeyword_0_2_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getExpFuncAccess().getParamsExpressionParserRuleCall_0_2_1_1_0());
							}
							lv_params_4_0=ruleexpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getExpFuncRule());
								}
								add(
									$current,
									"params",
									lv_params_4_0,
									"de.uniluebeck.isp.tessla.TeSSLa.expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpFuncAccess().getRightParenthesisKeyword_0_3());
			}
			(
				otherlv_6=':'
				{
					newLeafNode(otherlv_6, grammarAccess.getExpFuncAccess().getColonKeyword_0_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpFuncAccess().getTypeTypeParserRuleCall_0_4_1_0());
						}
						lv_type_7_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpFuncRule());
							}
							set(
								$current,
								"type",
								lv_type_7_0,
								"de.uniluebeck.isp.tessla.TeSSLa.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExpFuncAccess().getNameExpLitParserRuleCall_1_0_0());
					}
					lv_name_8_0=ruleexpLit
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpFuncRule());
						}
						set(
							$current,
							"name",
							lv_name_8_0,
							"de.uniluebeck.isp.tessla.TeSSLa.expLit");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_9=':'
				{
					newLeafNode(otherlv_9, grammarAccess.getExpFuncAccess().getColonKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExpFuncAccess().getTypeTypeParserRuleCall_1_1_1_0());
						}
						lv_type_10_0=ruletype
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExpFuncRule());
							}
							set(
								$current,
								"type",
								lv_type_10_0,
								"de.uniluebeck.isp.tessla.TeSSLa.type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleexpLit
entryRuleexpLit returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpLitRule()); }
	iv_ruleexpLit=ruleexpLit
	{ $current=$iv_ruleexpLit.current.getText(); }
	EOF;

// Rule expLit
ruleexpLit returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getExpLitAccess().getIDTerminalRuleCall_0());
		}
		    |
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getExpLitAccess().getSTRINGTerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getExpLitAccess().getINTTerminalRuleCall_2());
		}
		    |
		kw='()'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpLitAccess().getLeftParenthesisRightParenthesisKeyword_3());
		}
		    |
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpLitAccess().getTrueKeyword_4());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpLitAccess().getFalseKeyword_5());
		}
	)
;

// Entry rule entryRuletype
entryRuletype returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruletype=ruletype
	{ $current=$iv_ruletype.current.getText(); }
	EOF;

// Rule type
ruletype returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getTypeAccess().getIDTerminalRuleCall_0_0());
			}
			kw='<'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getLessThanSignKeyword_0_1());
			}
			{
				newCompositeNode(grammarAccess.getTypeAccess().getTypeParserRuleCall_0_2());
			}
			this_type_2=ruletype
			{
				$current.merge(this_type_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getTypeAccess().getCommaKeyword_0_3_0());
				}
				{
					newCompositeNode(grammarAccess.getTypeAccess().getTypeParserRuleCall_0_3_1());
				}
				this_type_4=ruletype
				{
					$current.merge(this_type_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			kw='>'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getTypeAccess().getGreaterThanSignKeyword_0_4());
			}
		)
		    |
		this_ID_6=RULE_ID
		{
			$current.merge(this_ID_6);
		}
		{
			newLeafNode(this_ID_6, grammarAccess.getTypeAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleinfixOperator
entryRuleinfixOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getInfixOperatorRule()); }
	iv_ruleinfixOperator=ruleinfixOperator
	{ $current=$iv_ruleinfixOperator.current.getText(); }
	EOF;

// Rule infixOperator
ruleinfixOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getPercentSignKeyword_0());
		}
		    |
		kw='<<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getLessThanSignLessThanSignKeyword_1());
		}
		    |
		kw='>>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getLessThanSignEqualsSignKeyword_4());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getLessThanSignKeyword_5());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getGreaterThanSignKeyword_6());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getExclamationMarkEqualsSignKeyword_7());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getEqualsSignEqualsSignKeyword_8());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getAmpersandKeyword_9());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getVerticalLineKeyword_10());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getCircumflexAccentKeyword_11());
		}
		    |
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getPlusSignKeyword_12());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getHyphenMinusKeyword_13());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getAsteriskKeyword_14());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getInfixOperatorAccess().getSolidusKeyword_15());
		}
	)
;

// Entry rule entryRuleunaryOperator
entryRuleunaryOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperatorRule()); }
	iv_ruleunaryOperator=ruleunaryOperator
	{ $current=$iv_ruleunaryOperator.current.getText(); }
	EOF;

// Rule unaryOperator
ruleunaryOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='~'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getTildeKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw='!'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOperatorAccess().getExclamationMarkKeyword_2());
		}
	)
;

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
