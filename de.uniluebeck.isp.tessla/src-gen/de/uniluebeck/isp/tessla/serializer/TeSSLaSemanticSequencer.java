/*
 * generated by Xtext 2.12.0
 */
package de.uniluebeck.isp.tessla.serializer;

import com.google.inject.Inject;
import de.uniluebeck.isp.tessla.services.TeSSLaGrammarAccess;
import de.uniluebeck.isp.tessla.teSSLa.Model;
import de.uniluebeck.isp.tessla.teSSLa.TeSSLaPackage;
import de.uniluebeck.isp.tessla.teSSLa.definition;
import de.uniluebeck.isp.tessla.teSSLa.expFunc;
import de.uniluebeck.isp.tessla.teSSLa.expInfix;
import de.uniluebeck.isp.tessla.teSSLa.expUnary;
import de.uniluebeck.isp.tessla.teSSLa.expression;
import de.uniluebeck.isp.tessla.teSSLa.in;
import de.uniluebeck.isp.tessla.teSSLa.out;
import de.uniluebeck.isp.tessla.teSSLa.paramList;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TeSSLaSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TeSSLaGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TeSSLaPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TeSSLaPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TeSSLaPackage.DEFINITION:
				sequence_definition(context, (definition) semanticObject); 
				return; 
			case TeSSLaPackage.EXP_FUNC:
				sequence_expFunc(context, (expFunc) semanticObject); 
				return; 
			case TeSSLaPackage.EXP_INFIX:
				sequence_expInfix(context, (expInfix) semanticObject); 
				return; 
			case TeSSLaPackage.EXP_UNARY:
				sequence_expUnary(context, (expUnary) semanticObject); 
				return; 
			case TeSSLaPackage.EXPRESSION:
				sequence_expression(context, (expression) semanticObject); 
				return; 
			case TeSSLaPackage.IN:
				sequence_in(context, (in) semanticObject); 
				return; 
			case TeSSLaPackage.OUT:
				sequence_out(context, (out) semanticObject); 
				return; 
			case TeSSLaPackage.PARAM_LIST:
				sequence_paramList(context, (paramList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     spec+=statement+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     statement returns definition
	 *     definition returns definition
	 *
	 * Constraint:
	 *     (def=ID paramList=paramList? type=type? (expression=expression | (statements+=statement* expression=expression)))
	 */
	protected void sequence_definition(ISerializationContext context, definition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expFunc returns expFunc
	 *
	 * Constraint:
	 *     ((name=ID (params+=expression params+=expression*)? type=type?) | (name=expLit type=type?))
	 */
	protected void sequence_expFunc(ISerializationContext context, expFunc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expInfix returns expInfix
	 *
	 * Constraint:
	 *     (unary+=expUnary (operator+=infixOperator unary+=expUnary)* type=type?)
	 */
	protected void sequence_expInfix(ISerializationContext context, expInfix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expUnary returns expUnary
	 *
	 * Constraint:
	 *     (operator=unaryOperator? value=expFunc type=type?)
	 */
	protected void sequence_expUnary(ISerializationContext context, expUnary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     expression returns expression
	 *
	 * Constraint:
	 *     (infix+=expInfix* infix+=expInfix (infix+=expInfix* infix+=expInfix)* type=type?)
	 */
	protected void sequence_expression(ISerializationContext context, expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     statement returns in
	 *     in returns in
	 *
	 * Constraint:
	 *     (name=ID type=type)
	 */
	protected void sequence_in(ISerializationContext context, in semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TeSSLaPackage.Literals.IN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TeSSLaPackage.Literals.IN__NAME));
			if (transientValues.isValueTransient(semanticObject, TeSSLaPackage.Literals.IN__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TeSSLaPackage.Literals.IN__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInAccess().getTypeTypeParserRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     statement returns out
	 *     out returns out
	 *
	 * Constraint:
	 *     (expression=expression name=ID?)
	 */
	protected void sequence_out(ISerializationContext context, out semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     paramList returns paramList
	 *
	 * Constraint:
	 *     (params+=ID types+=type? (params+=ID types+=type?)*)?
	 */
	protected void sequence_paramList(ISerializationContext context, paramList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
