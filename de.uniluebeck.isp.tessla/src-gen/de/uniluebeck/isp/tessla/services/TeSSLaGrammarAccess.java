/*
 * generated by Xtext 2.12.0
 */
package de.uniluebeck.isp.tessla.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TeSSLaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.Model");
		private final Assignment cSpecAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpecStatementParserRuleCall_0 = (RuleCall)cSpecAssignment.eContents().get(0);
		
		//Model:
		//	spec+=statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//spec+=statement*
		public Assignment getSpecAssignment() { return cSpecAssignment; }
		
		//statement
		public RuleCall getSpecStatementParserRuleCall_0() { return cSpecStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSL_COMMENTTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//statement:
		//	definition | out | in | SL_COMMENT;
		@Override public ParserRule getRule() { return rule; }
		
		//definition | out | in | SL_COMMENT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }
		
		//out
		public RuleCall getOutParserRuleCall_1() { return cOutParserRuleCall_1; }
		
		//in
		public RuleCall getInParserRuleCall_2() { return cInParserRuleCall_2; }
		
		//SL_COMMENT
		public RuleCall getSL_COMMENTTerminalRuleCall_3() { return cSL_COMMENTTerminalRuleCall_3; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDefineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cDefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefIDTerminalRuleCall_1_0 = (RuleCall)cDefAssignment_1.eContents().get(0);
		private final Assignment cParamListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamListParamListParserRuleCall_2_0 = (RuleCall)cParamListAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_5_0_0 = (RuleCall)cExpressionAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_5_1_1_0 = (RuleCall)cStatementsAssignment_5_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_5_1_2 = (Assignment)cGroup_5_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_5_1_2_0 = (RuleCall)cExpressionAssignment_5_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_3 = (Keyword)cGroup_5_1.eContents().get(3);
		
		//definition:
		//	('def' | 'define') def=ID paramList=paramList? (':' type=type)? ':=' (expression=expression | '{'
		//	statements+=statement* expression=expression '}');
		@Override public ParserRule getRule() { return rule; }
		
		//('def' | 'define') def=ID paramList=paramList? (':' type=type)? ':=' (expression=expression | '{' statements+=statement*
		//expression=expression '}')
		public Group getGroup() { return cGroup; }
		
		//'def' | 'define'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'def'
		public Keyword getDefKeyword_0_0() { return cDefKeyword_0_0; }
		
		//'define'
		public Keyword getDefineKeyword_0_1() { return cDefineKeyword_0_1; }
		
		//def=ID
		public Assignment getDefAssignment_1() { return cDefAssignment_1; }
		
		//ID
		public RuleCall getDefIDTerminalRuleCall_1_0() { return cDefIDTerminalRuleCall_1_0; }
		
		//paramList=paramList?
		public Assignment getParamListAssignment_2() { return cParamListAssignment_2; }
		
		//paramList
		public RuleCall getParamListParamListParserRuleCall_2_0() { return cParamListParamListParserRuleCall_2_0; }
		
		//(':' type=type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//type=type
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_3_1_0() { return cTypeTypeParserRuleCall_3_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }
		
		//expression=expression | '{' statements+=statement* expression=expression '}'
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//expression=expression
		public Assignment getExpressionAssignment_5_0() { return cExpressionAssignment_5_0; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_5_0_0() { return cExpressionExpressionParserRuleCall_5_0_0; }
		
		//'{' statements+=statement* expression=expression '}'
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1_0() { return cLeftCurlyBracketKeyword_5_1_0; }
		
		//statements+=statement*
		public Assignment getStatementsAssignment_5_1_1() { return cStatementsAssignment_5_1_1; }
		
		//statement
		public RuleCall getStatementsStatementParserRuleCall_5_1_1_0() { return cStatementsStatementParserRuleCall_5_1_1_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_5_1_2() { return cExpressionAssignment_5_1_2; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_5_1_2_0() { return cExpressionExpressionParserRuleCall_5_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_1_3() { return cRightCurlyBracketKeyword_5_1_3; }
	}
	public class ParamListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.paramList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParamListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cParamsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParamsIDTerminalRuleCall_0_2_0 = (RuleCall)cParamsAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cTypesAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_0_3_1_0 = (RuleCall)cTypesAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cCommaKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cParamsAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_0_4_1_0 = (RuleCall)cParamsAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final Keyword cColonKeyword_0_4_2_0 = (Keyword)cGroup_0_4_2.eContents().get(0);
		private final Assignment cTypesAssignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_0_4_2_1_0 = (RuleCall)cTypesAssignment_0_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cParamListAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//paramList:
		//	{paramList} '(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')'
		//	| {paramList} '(' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{paramList} '(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')' | {paramList} '(' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{paramList} '(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{paramList}
		public Action getParamListAction_0_0() { return cParamListAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//params+=ID
		public Assignment getParamsAssignment_0_2() { return cParamsAssignment_0_2; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_0_2_0() { return cParamsIDTerminalRuleCall_0_2_0; }
		
		//(':' types+=type)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//':'
		public Keyword getColonKeyword_0_3_0() { return cColonKeyword_0_3_0; }
		
		//types+=type
		public Assignment getTypesAssignment_0_3_1() { return cTypesAssignment_0_3_1; }
		
		//type
		public RuleCall getTypesTypeParserRuleCall_0_3_1_0() { return cTypesTypeParserRuleCall_0_3_1_0; }
		
		//(',' params+=ID (':' types+=type)?)*
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//','
		public Keyword getCommaKeyword_0_4_0() { return cCommaKeyword_0_4_0; }
		
		//params+=ID
		public Assignment getParamsAssignment_0_4_1() { return cParamsAssignment_0_4_1; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_0_4_1_0() { return cParamsIDTerminalRuleCall_0_4_1_0; }
		
		//(':' types+=type)?
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//':'
		public Keyword getColonKeyword_0_4_2_0() { return cColonKeyword_0_4_2_0; }
		
		//types+=type
		public Assignment getTypesAssignment_0_4_2_1() { return cTypesAssignment_0_4_2_1; }
		
		//type
		public RuleCall getTypesTypeParserRuleCall_0_4_2_1_0() { return cTypesTypeParserRuleCall_0_4_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//{paramList} '(' ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{paramList}
		public Action getParamListAction_1_0() { return cParamListAction_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class OutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.out");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//out:
		//	'out' expression=expression ('as' name=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' expression=expression ('as' name=ID)?
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
		
		//('as' name=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
	}
	public class InElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.in");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//in:
		//	'in' name=ID ':' type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' name=ID ':' type=type
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cInfixAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cInfixExpInfixParserRuleCall_0_0_1_0 = (RuleCall)cInfixAssignment_0_0_1.eContents().get(0);
		private final Keyword cThenKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cInfixAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInfixExpInfixParserRuleCall_0_1_0 = (RuleCall)cInfixAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cElseKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cIfKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cInfixAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cInfixExpInfixParserRuleCall_0_2_1_1_0 = (RuleCall)cInfixAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cThenKeyword_0_2_1_2 = (Keyword)cGroup_0_2_1.eContents().get(2);
		private final Assignment cInfixAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cInfixExpInfixParserRuleCall_0_2_2_0 = (RuleCall)cInfixAssignment_0_2_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cColonKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cTypeAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_3_1_0 = (RuleCall)cTypeAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//expression:
		//	('if' infix+=expInfix 'then')* infix+=expInfix ('else' ('if' infix+=expInfix 'then')* infix+=expInfix)* (':'
		//	type=type)? | ID '=' expression;
		@Override public ParserRule getRule() { return rule; }
		
		//('if' infix+=expInfix 'then')* infix+=expInfix ('else' ('if' infix+=expInfix 'then')* infix+=expInfix)* (':' type=type)?
		//| ID '=' expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//('if' infix+=expInfix 'then')* infix+=expInfix ('else' ('if' infix+=expInfix 'then')* infix+=expInfix)* (':' type=type)?
		public Group getGroup_0() { return cGroup_0; }
		
		//('if' infix+=expInfix 'then')*
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_0_0() { return cIfKeyword_0_0_0; }
		
		//infix+=expInfix
		public Assignment getInfixAssignment_0_0_1() { return cInfixAssignment_0_0_1; }
		
		//expInfix
		public RuleCall getInfixExpInfixParserRuleCall_0_0_1_0() { return cInfixExpInfixParserRuleCall_0_0_1_0; }
		
		//'then'
		public Keyword getThenKeyword_0_0_2() { return cThenKeyword_0_0_2; }
		
		//infix+=expInfix
		public Assignment getInfixAssignment_0_1() { return cInfixAssignment_0_1; }
		
		//expInfix
		public RuleCall getInfixExpInfixParserRuleCall_0_1_0() { return cInfixExpInfixParserRuleCall_0_1_0; }
		
		//('else' ('if' infix+=expInfix 'then')* infix+=expInfix)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'else'
		public Keyword getElseKeyword_0_2_0() { return cElseKeyword_0_2_0; }
		
		//('if' infix+=expInfix 'then')*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//'if'
		public Keyword getIfKeyword_0_2_1_0() { return cIfKeyword_0_2_1_0; }
		
		//infix+=expInfix
		public Assignment getInfixAssignment_0_2_1_1() { return cInfixAssignment_0_2_1_1; }
		
		//expInfix
		public RuleCall getInfixExpInfixParserRuleCall_0_2_1_1_0() { return cInfixExpInfixParserRuleCall_0_2_1_1_0; }
		
		//'then'
		public Keyword getThenKeyword_0_2_1_2() { return cThenKeyword_0_2_1_2; }
		
		//infix+=expInfix
		public Assignment getInfixAssignment_0_2_2() { return cInfixAssignment_0_2_2; }
		
		//expInfix
		public RuleCall getInfixExpInfixParserRuleCall_0_2_2_0() { return cInfixExpInfixParserRuleCall_0_2_2_0; }
		
		//(':' type=type)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//':'
		public Keyword getColonKeyword_0_3_0() { return cColonKeyword_0_3_0; }
		
		//type=type
		public Assignment getTypeAssignment_0_3_1() { return cTypeAssignment_0_3_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_3_1_0() { return cTypeTypeParserRuleCall_0_3_1_0; }
		
		//ID '=' expression
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }
	}
	public class ExpInfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.expInfix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryExpUnaryParserRuleCall_0_0 = (RuleCall)cUnaryAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorInfixOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cUnaryAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnaryExpUnaryParserRuleCall_1_1_0 = (RuleCall)cUnaryAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//expInfix:
		//	unary+=expUnary (operator+=infixOperator unary+=expUnary)* (':' type=type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//unary+=expUnary (operator+=infixOperator unary+=expUnary)* (':' type=type)?
		public Group getGroup() { return cGroup; }
		
		//unary+=expUnary
		public Assignment getUnaryAssignment_0() { return cUnaryAssignment_0; }
		
		//expUnary
		public RuleCall getUnaryExpUnaryParserRuleCall_0_0() { return cUnaryExpUnaryParserRuleCall_0_0; }
		
		//(operator+=infixOperator unary+=expUnary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//operator+=infixOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//infixOperator
		public RuleCall getOperatorInfixOperatorParserRuleCall_1_0_0() { return cOperatorInfixOperatorParserRuleCall_1_0_0; }
		
		//unary+=expUnary
		public Assignment getUnaryAssignment_1_1() { return cUnaryAssignment_1_1; }
		
		//expUnary
		public RuleCall getUnaryExpUnaryParserRuleCall_1_1_0() { return cUnaryExpUnaryParserRuleCall_1_1_0; }
		
		//(':' type=type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class ExpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.expUnary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpFuncParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		
		//expUnary:
		//	operator=unaryOperator? value=expFunc (':' type=type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=unaryOperator? value=expFunc (':' type=type)?
		public Group getGroup() { return cGroup; }
		
		//operator=unaryOperator?
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//unaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_0_0() { return cOperatorUnaryOperatorParserRuleCall_0_0; }
		
		//value=expFunc
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//expFunc
		public RuleCall getValueExpFuncParserRuleCall_1_0() { return cValueExpFuncParserRuleCall_1_0; }
		
		//(':' type=type)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//type=type
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_2_1_0() { return cTypeTypeParserRuleCall_2_1_0; }
	}
	public class ExpFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.expFunc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cParamsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cParamsExpressionParserRuleCall_0_2_0_0 = (RuleCall)cParamsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cParamsExpressionParserRuleCall_0_2_1_1_0 = (RuleCall)cParamsAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cColonKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cTypeAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_0_4_1_0 = (RuleCall)cTypeAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameExpLitParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_1_0 = (RuleCall)cTypeAssignment_1_1_1.eContents().get(0);
		
		//expFunc:
		//	name=ID '(' (params+=expression (',' params+=expression)*)? ')' (':' type=type)? | name=expLit (':' type=type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (params+=expression (',' params+=expression)*)? ')' (':' type=type)? | name=expLit (':' type=type)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID '(' (params+=expression (',' params+=expression)*)? ')' (':' type=type)?
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//(params+=expression (',' params+=expression)*)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//params+=expression
		public Assignment getParamsAssignment_0_2_0() { return cParamsAssignment_0_2_0; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_0_2_0_0() { return cParamsExpressionParserRuleCall_0_2_0_0; }
		
		//(',' params+=expression)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//','
		public Keyword getCommaKeyword_0_2_1_0() { return cCommaKeyword_0_2_1_0; }
		
		//params+=expression
		public Assignment getParamsAssignment_0_2_1_1() { return cParamsAssignment_0_2_1_1; }
		
		//expression
		public RuleCall getParamsExpressionParserRuleCall_0_2_1_1_0() { return cParamsExpressionParserRuleCall_0_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//(':' type=type)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//':'
		public Keyword getColonKeyword_0_4_0() { return cColonKeyword_0_4_0; }
		
		//type=type
		public Assignment getTypeAssignment_0_4_1() { return cTypeAssignment_0_4_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_0_4_1_0() { return cTypeTypeParserRuleCall_0_4_1_0; }
		
		//name=expLit (':' type=type)?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=expLit
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//expLit
		public RuleCall getNameExpLitParserRuleCall_1_0_0() { return cNameExpLitParserRuleCall_1_0_0; }
		
		//(':' type=type)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_1_0() { return cColonKeyword_1_1_0; }
		
		//type=type
		public Assignment getTypeAssignment_1_1_1() { return cTypeAssignment_1_1_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_1_1_0() { return cTypeTypeParserRuleCall_1_1_1_0; }
	}
	public class ExpLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.expLit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFalseKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//expLit:
		//	ID
		//	| STRING
		//	| INT
		//	| '()'
		//	| 'true'
		//	| 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | STRING | INT | '()' | 'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }
		
		//'true'
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }
		
		//'false'
		public Keyword getFalseKeyword_5() { return cFalseKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////arg:
		////	ID '=' expression
		////	| expression
		////;
		//type:
		//	ID '<' type (',' type)* '>' | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '<' type (',' type)* '>' | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID '<' type (',' type)* '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_0_2() { return cTypeParserRuleCall_0_2; }
		
		//(',' type)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_0_3_1() { return cTypeParserRuleCall_0_3_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_4() { return cGreaterThanSignKeyword_0_4; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class InfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.infixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAmpersandKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVerticalLineKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cCircumflexAccentKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPlusSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cHyphenMinusKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cAsteriskKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSolidusKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		
		//infixOperator:
		//	'%'
		//	| '<<'
		//	| '>>'
		//	| '>='
		//	| '<='
		//	| '<'
		//	| '>'
		//	| '!='
		//	| '=='
		//	| '&'
		//	| '|'
		//	| '^'
		//	| '+'
		//	| '-'
		//	| '*'
		//	| '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'%' | '<<' | '>>' | '>=' | '<=' | '<' | '>' | '!=' | '==' | '&' | '|' | '^' | '+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'%'
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7() { return cExclamationMarkEqualsSignKeyword_7; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_8() { return cEqualsSignEqualsSignKeyword_8; }
		
		//'&'
		public Keyword getAmpersandKeyword_9() { return cAmpersandKeyword_9; }
		
		//'|'
		public Keyword getVerticalLineKeyword_10() { return cVerticalLineKeyword_10; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_11() { return cCircumflexAccentKeyword_11; }
		
		//'+'
		public Keyword getPlusSignKeyword_12() { return cPlusSignKeyword_12; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_13() { return cHyphenMinusKeyword_13; }
		
		//'*'
		public Keyword getAsteriskKeyword_14() { return cAsteriskKeyword_14; }
		
		//'/'
		public Keyword getSolidusKeyword_15() { return cSolidusKeyword_15; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.unaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//unaryOperator:
		//	'~'
		//	| '-'
		//	| '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'~' | '-' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'~'
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final TerminalRule tSL_COMMENT;
	private final DefinitionElements pDefinition;
	private final ParamListElements pParamList;
	private final OutElements pOut;
	private final InElements pIn;
	private final ExpressionElements pExpression;
	private final ExpInfixElements pExpInfix;
	private final ExpUnaryElements pExpUnary;
	private final ExpFuncElements pExpFunc;
	private final ExpLitElements pExpLit;
	private final TypeElements pType;
	private final InfixOperatorElements pInfixOperator;
	private final UnaryOperatorElements pUnaryOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TeSSLaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.TeSSLa.SL_COMMENT");
		this.pDefinition = new DefinitionElements();
		this.pParamList = new ParamListElements();
		this.pOut = new OutElements();
		this.pIn = new InElements();
		this.pExpression = new ExpressionElements();
		this.pExpInfix = new ExpInfixElements();
		this.pExpUnary = new ExpUnaryElements();
		this.pExpFunc = new ExpFuncElements();
		this.pExpLit = new ExpLitElements();
		this.pType = new TypeElements();
		this.pInfixOperator = new InfixOperatorElements();
		this.pUnaryOperator = new UnaryOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniluebeck.isp.tessla.TeSSLa".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	spec+=statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//statement:
	//	definition | out | in | SL_COMMENT;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//definition:
	//	('def' | 'define') def=ID paramList=paramList? (':' type=type)? ':=' (expression=expression | '{'
	//	statements+=statement* expression=expression '}');
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//paramList:
	//	{paramList} '(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')'
	//	| {paramList} '(' ')';
	public ParamListElements getParamListAccess() {
		return pParamList;
	}
	
	public ParserRule getParamListRule() {
		return getParamListAccess().getRule();
	}
	
	//out:
	//	'out' expression=expression ('as' name=ID)?;
	public OutElements getOutAccess() {
		return pOut;
	}
	
	public ParserRule getOutRule() {
		return getOutAccess().getRule();
	}
	
	//in:
	//	'in' name=ID ':' type=type;
	public InElements getInAccess() {
		return pIn;
	}
	
	public ParserRule getInRule() {
		return getInAccess().getRule();
	}
	
	//expression:
	//	('if' infix+=expInfix 'then')* infix+=expInfix ('else' ('if' infix+=expInfix 'then')* infix+=expInfix)* (':'
	//	type=type)? | ID '=' expression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//expInfix:
	//	unary+=expUnary (operator+=infixOperator unary+=expUnary)* (':' type=type)?;
	public ExpInfixElements getExpInfixAccess() {
		return pExpInfix;
	}
	
	public ParserRule getExpInfixRule() {
		return getExpInfixAccess().getRule();
	}
	
	//expUnary:
	//	operator=unaryOperator? value=expFunc (':' type=type)?;
	public ExpUnaryElements getExpUnaryAccess() {
		return pExpUnary;
	}
	
	public ParserRule getExpUnaryRule() {
		return getExpUnaryAccess().getRule();
	}
	
	//expFunc:
	//	name=ID '(' (params+=expression (',' params+=expression)*)? ')' (':' type=type)? | name=expLit (':' type=type)?;
	public ExpFuncElements getExpFuncAccess() {
		return pExpFunc;
	}
	
	public ParserRule getExpFuncRule() {
		return getExpFuncAccess().getRule();
	}
	
	//expLit:
	//	ID
	//	| STRING
	//	| INT
	//	| '()'
	//	| 'true'
	//	| 'false';
	public ExpLitElements getExpLitAccess() {
		return pExpLit;
	}
	
	public ParserRule getExpLitRule() {
		return getExpLitAccess().getRule();
	}
	
	////arg:
	////	ID '=' expression
	////	| expression
	////;
	//type:
	//	ID '<' type (',' type)* '>' | ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//infixOperator:
	//	'%'
	//	| '<<'
	//	| '>>'
	//	| '>='
	//	| '<='
	//	| '<'
	//	| '>'
	//	| '!='
	//	| '=='
	//	| '&'
	//	| '|'
	//	| '^'
	//	| '+'
	//	| '-'
	//	| '*'
	//	| '/';
	public InfixOperatorElements getInfixOperatorAccess() {
		return pInfixOperator;
	}
	
	public ParserRule getInfixOperatorRule() {
		return getInfixOperatorAccess().getRule();
	}
	
	//unaryOperator:
	//	'~'
	//	| '-'
	//	| '!';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
