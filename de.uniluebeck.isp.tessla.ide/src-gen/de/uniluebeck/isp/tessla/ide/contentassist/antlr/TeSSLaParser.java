/*
 * generated by Xtext 2.12.0
 */
package de.uniluebeck.isp.tessla.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.uniluebeck.isp.tessla.ide.contentassist.antlr.internal.InternalTeSSLaParser;
import de.uniluebeck.isp.tessla.services.TeSSLaGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TeSSLaParser extends AbstractContentAssistParser {

	@Inject
	private TeSSLaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTeSSLaParser createParser() {
		InternalTeSSLaParser result = new InternalTeSSLaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getDefinitionAccess().getAlternatives_0(), "rule__Definition__Alternatives_0");
					put(grammarAccess.getDefinitionAccess().getAlternatives_5(), "rule__Definition__Alternatives_5");
					put(grammarAccess.getParamListAccess().getAlternatives(), "rule__ParamList__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getExpFuncAccess().getAlternatives(), "rule__ExpFunc__Alternatives");
					put(grammarAccess.getExpLitAccess().getAlternatives(), "rule__ExpLit__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getInfixOperatorAccess().getAlternatives(), "rule__InfixOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup_3(), "rule__Definition__Group_3__0");
					put(grammarAccess.getDefinitionAccess().getGroup_5_1(), "rule__Definition__Group_5_1__0");
					put(grammarAccess.getParamListAccess().getGroup_0(), "rule__ParamList__Group_0__0");
					put(grammarAccess.getParamListAccess().getGroup_0_3(), "rule__ParamList__Group_0_3__0");
					put(grammarAccess.getParamListAccess().getGroup_0_4(), "rule__ParamList__Group_0_4__0");
					put(grammarAccess.getParamListAccess().getGroup_0_4_2(), "rule__ParamList__Group_0_4_2__0");
					put(grammarAccess.getParamListAccess().getGroup_1(), "rule__ParamList__Group_1__0");
					put(grammarAccess.getOutAccess().getGroup(), "rule__Out__Group__0");
					put(grammarAccess.getOutAccess().getGroup_2(), "rule__Out__Group_2__0");
					put(grammarAccess.getInAccess().getGroup(), "rule__In__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_0(), "rule__Expression__Group_0_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_2(), "rule__Expression__Group_0_2__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_2_1(), "rule__Expression__Group_0_2_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_3(), "rule__Expression__Group_0_3__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpInfixAccess().getGroup(), "rule__ExpInfix__Group__0");
					put(grammarAccess.getExpInfixAccess().getGroup_1(), "rule__ExpInfix__Group_1__0");
					put(grammarAccess.getExpInfixAccess().getGroup_2(), "rule__ExpInfix__Group_2__0");
					put(grammarAccess.getExpUnaryAccess().getGroup(), "rule__ExpUnary__Group__0");
					put(grammarAccess.getExpUnaryAccess().getGroup_2(), "rule__ExpUnary__Group_2__0");
					put(grammarAccess.getExpFuncAccess().getGroup_0(), "rule__ExpFunc__Group_0__0");
					put(grammarAccess.getExpFuncAccess().getGroup_0_2(), "rule__ExpFunc__Group_0_2__0");
					put(grammarAccess.getExpFuncAccess().getGroup_0_2_1(), "rule__ExpFunc__Group_0_2_1__0");
					put(grammarAccess.getExpFuncAccess().getGroup_0_4(), "rule__ExpFunc__Group_0_4__0");
					put(grammarAccess.getExpFuncAccess().getGroup_1(), "rule__ExpFunc__Group_1__0");
					put(grammarAccess.getExpFuncAccess().getGroup_1_1(), "rule__ExpFunc__Group_1_1__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_0_3(), "rule__Type__Group_0_3__0");
					put(grammarAccess.getModelAccess().getSpecAssignment(), "rule__Model__SpecAssignment");
					put(grammarAccess.getDefinitionAccess().getDefAssignment_1(), "rule__Definition__DefAssignment_1");
					put(grammarAccess.getDefinitionAccess().getParamListAssignment_2(), "rule__Definition__ParamListAssignment_2");
					put(grammarAccess.getDefinitionAccess().getTypeAssignment_3_1(), "rule__Definition__TypeAssignment_3_1");
					put(grammarAccess.getDefinitionAccess().getExpressionAssignment_5_0(), "rule__Definition__ExpressionAssignment_5_0");
					put(grammarAccess.getDefinitionAccess().getStatementsAssignment_5_1_1(), "rule__Definition__StatementsAssignment_5_1_1");
					put(grammarAccess.getDefinitionAccess().getExpressionAssignment_5_1_2(), "rule__Definition__ExpressionAssignment_5_1_2");
					put(grammarAccess.getParamListAccess().getParamsAssignment_0_2(), "rule__ParamList__ParamsAssignment_0_2");
					put(grammarAccess.getParamListAccess().getTypesAssignment_0_3_1(), "rule__ParamList__TypesAssignment_0_3_1");
					put(grammarAccess.getParamListAccess().getParamsAssignment_0_4_1(), "rule__ParamList__ParamsAssignment_0_4_1");
					put(grammarAccess.getParamListAccess().getTypesAssignment_0_4_2_1(), "rule__ParamList__TypesAssignment_0_4_2_1");
					put(grammarAccess.getOutAccess().getExpressionAssignment_1(), "rule__Out__ExpressionAssignment_1");
					put(grammarAccess.getOutAccess().getNameAssignment_2_1(), "rule__Out__NameAssignment_2_1");
					put(grammarAccess.getInAccess().getNameAssignment_1(), "rule__In__NameAssignment_1");
					put(grammarAccess.getInAccess().getTypeAssignment_3(), "rule__In__TypeAssignment_3");
					put(grammarAccess.getExpressionAccess().getInfixAssignment_0_0_1(), "rule__Expression__InfixAssignment_0_0_1");
					put(grammarAccess.getExpressionAccess().getInfixAssignment_0_1(), "rule__Expression__InfixAssignment_0_1");
					put(grammarAccess.getExpressionAccess().getInfixAssignment_0_2_1_1(), "rule__Expression__InfixAssignment_0_2_1_1");
					put(grammarAccess.getExpressionAccess().getInfixAssignment_0_2_2(), "rule__Expression__InfixAssignment_0_2_2");
					put(grammarAccess.getExpressionAccess().getTypeAssignment_0_3_1(), "rule__Expression__TypeAssignment_0_3_1");
					put(grammarAccess.getExpInfixAccess().getUnaryAssignment_0(), "rule__ExpInfix__UnaryAssignment_0");
					put(grammarAccess.getExpInfixAccess().getOperatorAssignment_1_0(), "rule__ExpInfix__OperatorAssignment_1_0");
					put(grammarAccess.getExpInfixAccess().getUnaryAssignment_1_1(), "rule__ExpInfix__UnaryAssignment_1_1");
					put(grammarAccess.getExpInfixAccess().getTypeAssignment_2_1(), "rule__ExpInfix__TypeAssignment_2_1");
					put(grammarAccess.getExpUnaryAccess().getOperatorAssignment_0(), "rule__ExpUnary__OperatorAssignment_0");
					put(grammarAccess.getExpUnaryAccess().getValueAssignment_1(), "rule__ExpUnary__ValueAssignment_1");
					put(grammarAccess.getExpUnaryAccess().getTypeAssignment_2_1(), "rule__ExpUnary__TypeAssignment_2_1");
					put(grammarAccess.getExpFuncAccess().getNameAssignment_0_0(), "rule__ExpFunc__NameAssignment_0_0");
					put(grammarAccess.getExpFuncAccess().getParamsAssignment_0_2_0(), "rule__ExpFunc__ParamsAssignment_0_2_0");
					put(grammarAccess.getExpFuncAccess().getParamsAssignment_0_2_1_1(), "rule__ExpFunc__ParamsAssignment_0_2_1_1");
					put(grammarAccess.getExpFuncAccess().getTypeAssignment_0_4_1(), "rule__ExpFunc__TypeAssignment_0_4_1");
					put(grammarAccess.getExpFuncAccess().getNameAssignment_1_0(), "rule__ExpFunc__NameAssignment_1_0");
					put(grammarAccess.getExpFuncAccess().getTypeAssignment_1_1_1(), "rule__ExpFunc__TypeAssignment_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TeSSLaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TeSSLaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
